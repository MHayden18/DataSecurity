#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat May 18 13:30:24 2019

@author: addisonbe
"""
import myCrypto
import binascii

def rsa_crt():
	p
	q
	n=p*q
	e=65537
	
	# 
	# file = open("message.txt",'r')
	# message = file.read()
	# m = int(binascii.hexlify(message.encode()),16);
	#
	m=6376750597334872524063275314930822077393410097200752395065294313732357165582011717368244347113421095401321193199226940706382979347785818716529882529797228779035350669985486366433128204713004147644752270915065381184730437255211288608811541036675112991118814584959677070819567733835929004481287842389154411484627611619902110085571125334162582282451955207044749279764232433401110255578310767120016704989260189286654413393040122933242856710683937662543105133040185514823848053664122488619588042681959434111110777866939982568166692845129817024007544912025384155152377201235336306459431065204534105672288618253066163501508950488386649571046892406726172027459649303333582452518896663650402066273448510115729390725630882998479766388382916996298533142917236611226812283251898135901176044969829252307624360051190213995140881677444221956679933982954435484301485543537244552708393395455977325566705990373212856779156475938479598833990738570011950
	cipherText=pow(m,e,n)
	
	# TODO
	phi = (p-1)*(q-1)
	d = myCrypto.mulinv(e, phi)
	
	# Transform ciphertext and private key into CRT:
	y_p = cipherText % p
	y_q = cipherText % q
	d_p = d % (p-1)
	d_q = d % (q-1)
	
	# Find transformed plaintext:
	decrypt_p = pow(y_p, d_p, p)
	decrypt_q = pow(y_q, d_q, q)
	
	# Modular Inverse of small exponents:
	c_p = myCrypto.mulinv(q, p)		# c_p = q^(-1) mod p
	c_q = myCrypto.mulinv(p, q)		
	
	# Decrypt using CRT:
	decryptedText = ( q * c_p * decrypt_p + p * c_q * decrypt_q ) % n
	
	# Final output:
	plainText = binascii.unhexlify(hex(decryptedText)[2:]).decode()  # [2:] slicing, to strip the 0x part 
	print(plainText)

